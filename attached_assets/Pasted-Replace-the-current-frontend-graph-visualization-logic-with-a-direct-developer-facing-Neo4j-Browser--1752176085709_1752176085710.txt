Replace the current frontend graph visualization logic with a direct developer-facing Neo4j Browser interface. The goal is to allow developers to inspect and explore the actual conversation graph stored in Neo4j using Cypher queries.

📍 Do not maintain or expand the current React-based graph layout or sidebar visualization. Deprecate any frontend logic related to custom entity positioning, smart layout algorithms, or dynamic node sizing.

🔧 Implementation Tasks:

1. Configure Neo4j access:
   - Ensure the database is running and accessible via Neo4j Desktop or Neo4j Aura
   - Enable access using a bolt:// or neo4j+s:// connection URI
   - Document the connection URI and credentials in a dev-only environment file or README

2. Validate the Neo4j schema:
   - Node types must include:
     - (:User {name})
     - (:Message {text, timestamp})
     - (:Topic {name})
     - (:Entity {name, type})
   - Relationships must include:
     - (:User)-[:SENT]->(:Message)
     - (:Message)-[:TO]->(:User)
     - (:Message)-[:MENTIONS]->(:Topic)
     - (:Message)-[:REPLIED_TO]->(:Message)
     - (:Message)-[:CONTAINS_ENTITY]->(:Entity)

3. Create and test the following Cypher queries in Neo4j Browser:
   - View entire recent conversation graph:
     ```
     MATCH (u:User)-[:SENT]->(m:Message)
     OPTIONAL MATCH (m)-[:TO]->(r:User)
     OPTIONAL MATCH (m)-[:MENTIONS]->(t:Topic)
     OPTIONAL MATCH (m)-[:REPLIED_TO]->(prev:Message)
     OPTIONAL MATCH (m)-[:CONTAINS_ENTITY]->(e:Entity)
     RETURN u, m, r, t, prev, e
     ORDER BY m.timestamp DESC
     LIMIT 100
     ```
   - View all messages about a specific topic:
     ```
     MATCH (m:Message)-[:MENTIONS]->(t:Topic {name: "Tesla"})
     OPTIONAL MATCH (m)<-[:SENT]-(u:User)
     OPTIONAL MATCH (m)-[:TO]->(r:User)
     RETURN u, m, r, t
     ORDER BY m.timestamp DESC
     ```

4. Create a dev-only documentation page or route:
   - Add `/admin/graph-browser` or a private README section
   - Include Neo4j Browser link, connection instructions, and sample queries

🎯 Final Outcome:
Frontend-based knowledge graph visualizations are removed from the UI. Developers now inspect and explore the graph interactively through Neo4j Browser using live data and documented Cypher queries. This simplifies the visualization system and improves access to the underlying relationship data for debugging, analytics, and LLM prompt construction.
